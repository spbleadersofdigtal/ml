import openai
import datetime
from ast import literal_eval
import re

KEY = "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"

regex = r"({(\n.+)+\n})"

description = """
üçÄ –ö–µ–π—Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å:
–û–û–û ¬´–ê–∫—Å–µ–ª–µ—Ä–∞—Ç–æ—Ä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–∏ÃÜ¬ª (https://ac-vo.ru/) –ø—Ä–∏ –ò–ù–¢–¶ –ú–ì–£ ¬´–í–æ—Ä–æ–±—å–µ–≤—ã –≥–æ—Ä—ã¬ª.
–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ÃÜ, –∫—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–∏ÃÜ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –ò–ù–¢–¶ –ú–ì–£ ¬´–í–æ—Ä–æ–±—å–µ–≤—ã –≥–æ—Ä—ã¬ª

–†–∞—Å–∫—Ä–æ–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ç–∞–∏ÃÜ–Ω—É –≤–µ–Ω—á—É—Ä–∞ ‚Äî –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∑–∞—â–∏—Ç—ã —Å–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —Å—Ç–∞—Ä—Ç–∞–ø—É –Ω—É–∂–µ–Ω Pitch-Deck.

üçÄ –ß—Ç–æ —Ç–∞–∫–æ–µ Pitch-Deck?
Pitch-Deck –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–∏ÃÜ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é-—Ç–∏–∑–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞/–∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Ü. –¶–µ–ª—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ - –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ÃÜ).
–ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞?

üçÄ –ü—Ä–æ–±–ª–µ–º–∞ #1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤:
–î–ª—è –º–Ω–æ–≥–∏—Ö —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã —Å–æ–∑–¥–∞—é—Ç –ø—Ä–µ–≥—Ä–∞–¥—É –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ Pitch Deck. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞–∏ÃÜ–º–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤, –¥–∏–∑–∞–∏ÃÜ–Ω–µ—Ä–æ–≤ –∏ –∫–æ–ø–∏—Ä–∞–∏ÃÜ—Ç–µ—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ÃÜ —Ä—ã–Ω–∫–∞, –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ–Ω–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–∏ÃÜ –∏ –º–∞–ª–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–∏ÃÜ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, —á—Ç–æ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ÃÜ.

üçÄ –ü—Ä–æ–±–ª–µ–º–∞ #2. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã:
–ü—Ä–æ–±–ª–µ–º–æ–∏ÃÜ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ÃÜ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Pitch Deck. –ù–µ –≤—Å–µ–≥–¥–∞ —É —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞, —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞, —á—Ç–æ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–∏ÃÜ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–∏ÃÜ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ÃÜ.

üçÄ –ü—Ä–æ–±–ª–µ–º–∞ #3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
–ú–æ–ª–æ–¥—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ÃÜ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ü–µ–ª—ã–∏ÃÜ –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–¥–Ω–∏–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è Pitch Deck. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ–ª–æ–¥–∞—è –∏ –Ω–µ–±–æ–ª—å—à–∞—è –∫–æ–º–∞–Ω–¥–∞, —É –∫–æ—Ç–æ—Ä–æ–∏ÃÜ —á–∏—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤–µ–¥—å –æ–Ω–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥—Ä—É–∂–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–∞.

üçÄ –ò–î–ï–Ø:
–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∫–µ–∏ÃÜ—Å–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò, –∑–∞—Ç–æ—á–µ–Ω–Ω–æ–≥–æ –ø–æ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ Pitch-Deck.
"""

names_prompt="""
–ü–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "names": "–ù–∞–∑–æ–≤–∏ 5 –∏–º–µ–Ω –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
}
"""

prompts = [
"""
–ü–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  'users': '–ö—Ç–æ –±—É–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–º?',
  'problems': '–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç?',
  'actuality': '–ö–∞–∫–∏–º —Ñ–∞–∫—Ç–æ–º –æ–±—É—Å–ª–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã?',
  'solve': '–ö–∞–∫ —Ä–µ—à–∞–µ–º —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã?',
  'works': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ?',
}
""",
"""
–ü–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  'awards': '–¶–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
  'money': '–ù–∞ —á–µ–º –ø—Ä–æ–µ–∫—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç? —Å–∫–æ–ª—å–∫–æ –∏ –∑–∞ —á—Ç–æ –µ–º—É –ø–ª–∞—Ç—è—Ç –∫–ª–∏–µ–Ω—Ç—ã',
  'aims': –ù–∞–ø–∏—à–∏ 3 —Ü–µ–ª–∏: –Ω–∞ –º–µ—Å—è—Ü, –Ω–∞ –ø–æ–ª–≥–æ–¥–∞ –∏ –≥–æ–¥, —Ñ–æ—Ä–º–∞—Ç: {'1': —Ü–µ–ª—å –Ω–∞ –º–µ—Å—è—Ü, '2': —Ü–µ–ª—å –Ω–∞ –ø–æ–ª–≥–æ–¥–∞, '3': —Ü–µ–ª—å –Ω–∞ –≥–æ–¥},
  'investments_sold': '–ù–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç',
  'financial_indicators': '–ù–∞–ø–∏—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞'
}
""",
"""
–ü–æ —Ç–µ–∫—Å—Ç—É –æ—Ç–≤–µ—Ç—å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{
  'achieve': '–ß–µ–≥–æ –¥–æ–±—å–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ—Å–ª–µ –æ—Å–≤–æ–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
  'competitors_strength': '–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
  'competitors_low': '–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
  'advantages': '–ö–∞–∫–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞–¥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏',
  'category': "–ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç? –í—ã–±–µ—Ä–∏ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: 'Business Software', 'IndustrialTech', 'E-commerce', 'Advertising & Marketing', 'Hardware', 'RetailTech', 'ConstructionTech', 'Web3', 'EdTech', 'Business Intelligence', 'Cybersecurity', 'HrTech', 'Telecom & Communication', 'Media & Entertainment', 'FinTech', 'MedTech', 'Transport & Logistics', 'Gaming', 'FoodTech', 'AI', 'WorkTech', 'Consumer Goods & Services', 'Aero & SpaceTech', 'Legal & RegTech', 'Travel', 'PropTech', 'Energy', 'GreenTech'"
}
"""
]


openai.api_key = KEY

assertions = [
    [
        lambda data: 'users' in data.keys(),
        lambda data: 'problems' in data.keys(),
        lambda data: 'actuality' in data.keys(),
        lambda data: 'solve' in data.keys(),
        lambda data: 'works' in data.keys(),
    ],
    [
        lambda data: 'awards' in data.keys(),
        lambda data: 'money' in data.keys(),
        lambda data: 'aims' in data.keys(),
        lambda data: 'investments_sold' in data.keys(),
        lambda data: 'financial_indicators' in data.keys(),
    ],
    [
        lambda data: 'achieve' in data.keys(),
        lambda data: 'competitors_strength' in data.keys(),
        lambda data: 'competitors_low' in data.keys(),
        lambda data: 'advantages' in data.keys(),
    ]
]


def create_hints(description: str, stage: int):
    global prompts
    chat_completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": description + "\n" + prompts[stage]}],
    )
    str_content = chat_completion.choices[0].message.content
    try:
        filtered_content = list(re.finditer(regex, str_content, re.MULTILINE))[-1].group()
        if not len(filtered_content):
            raise ValueError(f'answer doesnt pass validation, {filtered_content}')
    except:
        raise ValueError(f'answer doesnt pass validation, {filtered_content}')
    content = literal_eval(filtered_content)
    for assertion_statement in assertions[stage]:
        assert assertion_statement(content)
    
    if stage == 1:
        content['aims'] = [
            {
                'aim': content['aims']['1'],
                'date': (datetime.datetime.now() + datetime.timedelta(days=30)).isoformat()
            },
            {
                'aim': content['aims']['2'],
                'date': (datetime.datetime.now() + datetime.timedelta(days=180)).isoformat()
            },
            {
                'aim': content['aims']['3'],
                'date': (datetime.datetime.now() + datetime.timedelta(days=365)).isoformat()
            }
        ]
    result = []
    for key, value in content.items():
        result.append({
            'type': key,
            'value': value
        })
    return result


def create_name_hint(description: str):
    global names_prompt
    chat_completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": description + "\n" + names_prompt}],
    )
    answer = literal_eval(chat_completion.choices[0].message.content)['names'].split(', ')
    print(answer)
    return {
        'type': 'names',
        'value': answer
    }

#print(create_name_hint(description))
print(create_hints(description, 0))
# print(create_hints(description, 1))
# print(create_hints(description, 2))